# Generated by Django 5.1.4 on 2024-12-20 18:42
from pathlib import Path

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models

import pdf.storage
from pdf.models.request import Status


def migrate_pdffiles(apps, schema_editor):
    PDFRequest = apps.get_model("pdf", "PDFRequest")
    PDFFile = apps.get_model("pdf", "PDFFile")
    db_alias = schema_editor.connection.alias

    already_done = set()
    for request in PDFRequest.objects.using(db_alias).filter(status=Status.DONE).order_by("-update_date").all():
        if request.file and request.filename not in already_done:
            already_done.add(request.filename)
            pdf_file = PDFFile()
            for field in [
                "update_date",
                "filename",
                "status",
                "time_elapsed",
                "progress",
                "file",
                "scheduled_at",
                "public",
                "tenant",
            ]:
                setattr(pdf_file, field, getattr(request, field))
            if not pdf_file.filename and pdf_file.file:
                pdf_file.filename = Path(pdf_file.file.name).stem
            pdf_file.save()


class Migration(migrations.Migration):

    dependencies = [
        ("backend", "0012_rename_prerendered_pdf_song_prerendered_and_more"),
        ("contenttypes", "0002_remove_content_type_name"),
        ("pdf", "0025_remove_pdfrequest_automated_category_present"),
        ("category", "0012_alter_category_link"),
    ]

    operations = [
        migrations.CreateModel(
            name="PDFTemplate",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "display_name",
                    models.CharField(
                        blank=True,
                        help_text="(Optional) Display name for the generated files. If empty filename will be used",
                        max_length=30,
                        null=True,
                        verbose_name="Display name",
                    ),
                ),
                (
                    "filename",
                    models.CharField(
                        help_text="File name of the generated PDF", max_length=30, verbose_name="File name"
                    ),
                ),
                (
                    "public",
                    models.BooleanField(
                        default=True,
                        help_text="True, if the file should be visible in the menu",
                        verbose_name="Public file",
                    ),
                ),
                (
                    "locale",
                    models.CharField(
                        choices=[("en", "English"), ("cs", "ÄŒesky")],
                        help_text="Language of the generated PDF",
                        max_length=5,
                        verbose_name="Language",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        help_text="Name to be used on the title page of the PDF, usually only this or Title image should be used",
                        max_length=100,
                        verbose_name="Title",
                    ),
                ),
                (
                    "show_date",
                    models.BooleanField(
                        default=True,
                        help_text="True, if the date should be included in the PDF",
                        verbose_name="Show date",
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        help_text="(Optional) title image for the PDF",
                        null=True,
                        upload_to="uploads/",
                        verbose_name="Title Image",
                    ),
                ),
                (
                    "margin",
                    models.FloatField(
                        default=0,
                        help_text="Margins for title image, might be needed for some printers",
                        verbose_name="Title Image margins",
                    ),
                ),
                (
                    "link",
                    models.CharField(
                        blank=True,
                        help_text="(Optional) URL Link to include in the PDF",
                        max_length=300,
                        verbose_name="Link",
                    ),
                ),
                (
                    "polymorphic_ctype",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="polymorphic_%(app_label)s.%(class)s_set+",
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PDFFile",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("update_date", models.DateTimeField(null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("QU", "Queued"),
                            ("SC", "Scheduled"),
                            ("PR", "In progress"),
                            ("DO", "Done"),
                            ("FA", "Failed"),
                        ],
                        default="QU",
                        max_length=2,
                    ),
                ),
                ("time_elapsed", models.IntegerField(null=True)),
                ("progress", models.IntegerField(default=0)),
                (
                    "file",
                    models.FileField(null=True, upload_to=pdf.models.request.upload_path),
                ),
                ("scheduled_at", models.DateTimeField(null=True)),
                (
                    "public",
                    models.BooleanField(
                        default=True, help_text="True, if the file should be public", verbose_name="Public file"
                    ),
                ),
                ("tenant", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="tenants.tenant")),
                (
                    "filename",
                    models.CharField(
                        help_text="File name of the generated PDF", max_length=30, verbose_name="File name"
                    ),
                ),
                (
                    "template",
                    models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to="pdf.pdftemplate"),
                ),
                (
                    "display_name",
                    models.CharField(
                        blank=True,
                        help_text="Display name for the file, if empty filename will be used",
                        max_length=30,
                        null=True,
                        verbose_name="Display name",
                    ),
                ),
            ],
            options={"ordering": ["-update_date"], "verbose_name": "File", "verbose_name_plural": "Files"},
        ),
        migrations.AlterModelOptions(
            name="pdffile",
            options={"verbose_name": "File", "verbose_name_plural": "Files"},
        ),
        migrations.RunPython(migrate_pdffiles),
        migrations.AlterModelOptions(
            name="pdfrequest",
            options={"verbose_name": "PDFRequest", "verbose_name_plural": "PDFRequests"},
        ),
        migrations.RemoveField(
            model_name="pdfrequest",
            name="category",
        ),
        migrations.RemoveField(
            model_name="pdfrequest",
            name="songs",
        ),
        migrations.CreateModel(
            name="ManualPDFTemplate",
            fields=[
                (
                    "pdftemplate_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="pdf.pdftemplate",
                    ),
                ),
                ("tenant", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="tenants.tenant")),
                (
                    "name",
                    models.CharField(
                        help_text="Name of this template, only shown internally",
                        max_length=255,
                        verbose_name="Template Name",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
                "verbose_name": "File Template",
                "verbose_name_plural": "File Templates",
            },
            bases=("pdf.pdftemplate",),
        ),
        migrations.CreateModel(
            name="PDFSong2",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "song_number",
                    models.PositiveIntegerField(
                        validators=[django.core.validators.MinValueValidator(1)], verbose_name="Song number"
                    ),
                ),
                ("song", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="backend.song")),
                ("request", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="pdf.manualpdftemplate")),
            ],
            options={
                "unique_together": {("song_number", "request", "song")},
            },
        ),
        migrations.AddField(
            model_name="manualpdftemplate",
            name="songs",
            field=models.ManyToManyField(through="pdf.PDFSong2", to="backend.song"),
        ),
        migrations.AlterModelOptions(
            name="manualpdftemplate",
            options={"verbose_name": "File Template", "verbose_name_plural": "File Templates"},
        ),
        migrations.AlterModelOptions(
            name="pdffile",
            options={"ordering": ["-update_date"], "verbose_name": "File", "verbose_name_plural": "Files"},
        ),
    ]
